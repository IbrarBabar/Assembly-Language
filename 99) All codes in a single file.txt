
sir all codes 
https://www.dropbox.com/sh/niyxgq6jrytazt5/AAAqVe2SejQq7SGSnizfBeyYa?dl=0

risc-V commands 

cd Downloads
chmod a+x Ripes-v2.1.0-linux-x86_64.AppImage
./Ripes-v2.1.0-linux-x86_64.AppImage


===============================

[org 0x0100]
mov  ax, 5
mov bx, 10
add ax, bx
mov bx,15
add ax, bx
mov ax, 0x4c00
int 0x21


============================================================================================================

                        (Lecture 2 code)

[org 0x0100]      ; program to add 3 numbers using memory variables
mov  ax, [num1]
mov bx, [num2]
add ax, bx
mov bx, [num3]
add ax, bx
mov [num4], ax
mov ax, 0x4c00
int 0x21

num1: dw 5    ; global variables (khaas jga  py allocate kiye jaty hain)
num2: dw 10
num3: dw 15
num4: dw 0


___________________________


[org 0x0100]      ; program to add 3 numbers using single_label & reg
mov  ax, [num1]
mov bx, [num1 + 2]
add ax, bx
mov bx, [num1 + 4]
add ax, bx
mov [num1+6], ax
mov ax, 0x4c00
int 0x21

num1: dw 5 , 10 , 15 , 0      
      
______________________________

[org 0x0100]      ; program to add 3 numbers using (dw) a single label

mov  ax, [num1]
mov [result], ax

mov ax, [num1 + 2]
add [result], ax

mov bx, [num1 + 4]
add [result], ax

mov ax, 0x4c00
int 0x21

num1: dw 5, 10, 15   ; global variables
result: dw 0

_____________________________________

[org 0x0100]      ; program to add 3 numbers using byte variable

mov  ax, [num1]   ;(program should do wrong || ax is 16 bit, db is 8 bit , so we can/t store db in ax)
mov [result], ax  ;we have to keep in mind that the label we use is fit with in register

mov ax, [num1 + 2]
add [result], ax

mov bx, [num1 + 4]
add [result], ax

mov ax, 0x4c00
int 0x21

num1: db 5, 10, 15  ; define_byte (program should wrong)
result: dw 0
===================================================================================================================

[org 0x0100]        ; program to add 3 numbers using (db) a single label
 
mov ax,0x8787       ; garbigde value
xor ax,ax           ; ax is empty now
                    ;(al=8 bit,,ah=8 bit)-> = ax which is 16 bit
                    ; (al,bl are 2 registers which are actually divided from ax register)
                    ;(also al=8 bit, bl=8 bit)
mov  al, [num1]   
mov bl, [num1+1]   

add al, bl

mov bl, [num1 + 2]
add al, bl
mov [num1+3],al

mov ax, 0x4c00
int 0x21

num1: db 5, 10, 15 , 0  ;db use and it should store 8-bit only(so al,bl,ah,bh registers should store them only)
                            ;result: dw 0
________________________________________________________
[org 0x0100]      ; program to add 3 numbers using a single label (db)
mov  ah, [num1]
mov bh, [num1 + 1]
add ah, bh
mov bh, [num1 + 2]
add ah, bh
mov [num1+3], ah
mov ax, 0x4c00
int 0x21

num1: db 5 , 10 , 15 , 0     
_________________________________________________________________________
[org 0x0100]      ; program to add 3 numbers indirect_Addressing
xor ax,ax        ;ax should be empty first
 
mov bx, num1     ;indirect addressing
add ax, [bx]     ; indirect addressing

add bx, 2        ; jump of 2 bytes

add ax, [bx]
add bx, 2
add ax,[bx]

mov [result], ax

mov ax, 0x4c00
int 0x21

num1: dw 5, 10, 15 
result: dw 0 
      
_______________________________________

[org 0x0100]      ; program to add 3 numbers using loop

mov ax, 0
mov cx, 3
mov bx, num1

outerloop:        ; looping in assambly
    add ax, [bx]    
    add bx, 2     ; increament in address
    sub cx, 1     
    jnz outerloop   ; jb tk cx zero na ho jay (zero flag set na ho jay || zero flag 1 na ho jay)
                    ; tb tk ye loop chly ge
mov [result], ax

num1: dw 5, 10, 15 
result: dw 0
==========================================================================================================================

	Lecture
	
[org 0x0100]      ; program to add 3 numbers (base_reg,jump_inst)

mov ax, 0
mov cx, 3
mov bx, 0   ; set base

outerloop:                      ; looping in assambly
    add ax, [num1 + bx]         ;num1 is an address (is address k andar bx ke value ko add kr 2) or
    				; add num1 ->address and bx then store it in ax 
    add bx, 2                   ; zero flag is not set therefore jump lgay ge
    sub cx, 1         
    jnz outerloop   ; jb tk cx zero na ho jay (zero flag set na ho jay || zero flag 1 na ho jay)
                    ; tb tk ye loop chly ge
mov [result], ax

num1: dw 5, 10, 15 
result: dw 0
______________________________________

					;jump not equal to condition + compare condition
[org 0x0100]      

mov ax, 0
mov bx, 0   ; set base

outerloop:                      ; looping in assambly
    add ax, [num1 + bx]         ; add num1 ->address and bx then store it in ax
    add bx, 2                    ; zero flag is not set therefore jump lgay ge
    cmp bx,20       
    jne outerloop   ; jb tk uper wali condition hold ni krti tb tk jump uper kr jao.
mov [result], ax

num1: dw 10,20,30,40,50,10,20,30,40,50
result: dw 0

______________________________________

[org 0x0100]     ;(db) jump not equal to condition + compare condition
jump start

num1: db 1, 4,7,9,2,6,4,1,7,4
result: db 0

 start:
mov ax,0
mov bx,0

outerloop:

	add ax,[num1+bx]   ;num1 is an address (is address k andar bx ke value ko add kr 2)
	mov bx, 2
        cmp bx,20
	jnz outerloop
mov [result], ax

mov ax,0x4c00
int 0x21	
________________________________________

;sorting 4 numbers
[org 0x0100]
jump start

num1: dw 6, 4, 5, 2

 start:
mov cx,4
    outerloop:
        mov bx,0
            innerloop:
                mov ax, [num1 + bx]
                cmp ax, [num1+bx+2]
                jbe noswap

                mov dx, [num1+bx+2]
                mov [num1+bx+2],ax
                mov [num1+bx], dx


        noswap:
        add bx,2
        cmp bx,6
        jne innerloop

    sub cx,1
    jnz outerloop

mov ax,0x4c00
int 0x21	

______________________________________

;easy way to sort
[org 0x0100]
jump start

num1: dw 6, 4, 5, 2
swap: db 0
 start:

    outerloop:
        mov bx,0
        mov byte [swap], 0  ; mwan swap k andar jo 0 movekrna ha us ka size 1 byte ho
            innerloop:
                mov ax, [num1 + bx]
                cmp ax, [num1+bx+2]
                jbe noswap

                mov dx, [num1+bx+2]
                mov [num1+bx+2],ax
                mov [num1+bx], dx
                mov byte [swap], 1


        noswap:
        add bx,2
        cmp bx,6
        jne innerloop

    cmp byte [swap], 1
    je outerloop

mov ax,0x4c00
int 0x21	

________________________________________
                ;also see the hardfrom of multiplication on register
[org 0x0100]    ;multilication
jump start

multiplicant: db 13  ; 4 bit number, save space of 8-bit numbers 
multiplier: db 5    ; 4 bit number
result: db 0         ; final result should be 8 bit

 start:
    mov cl, 4
    mov bl, [multiplicant] ;total 8-bits., (first multiplicant 4 bits ma jay ga then shift hpty hoty 8 bits tk pohanch jay ga)
    mov dl, [multiplier] ;4 bit ma jay ga and girty girty khatam ho jay ga


    checkbit:
    shr dl,1
    jnc skip
        add [result],bl


    skip:
    shl bl,1

    dec cl
    jne checkbit


mov ax,0x4c00
int 0x21	
____________________________________________________

[org 0x0100]
jump start

num1: dw 0x40FF          ;40FF=16649    
                          ;81FE=32278  
destination: dw 0x40FF
source: dw 0x1001

start:

    shl byte[num1],1         
    rcl byte[num1+1],1      ;[num1+1] mean addition of 1 byte in ram mean from least significant to most significant (4400 -> from 00 to 44)
    



    ;addition


xor ax,ax
mov al, byte[source]     
add byte[destination], al

mov al, [source+1]
adc byte[destination+1],al    ;[adc mean add through carry]


mov ax, 0x4c00     
int 0x21

______________________________________________________

[org 0x0100]           ;Multiplicaton (shl,jnc,adc,rcl,dec)
jmp start



multiplicand: dw 0xCX   ;200 = 0b 11001000
multilier: dw 0x32      ;50 = 0b 00110010

result: dw 0            ; should be 10,000 = 0x2710

start:
    mov cl, 8
    mov dl, [multilier]

checkbit:
    shr dl,1
    jnc skip

    mov al,[multiplicand]      ;extended addition
    add byte[result],al
    mov al, [multiplicand+1]
    adc byte[multiplicand+1], 1

skip:
    shl byte [multiplicand],1        ;extended shift
    rcl byte [multiplicand+1],1
  
  dec cl
  jnz checkbit


mov ax, 0x4c00     
int 0x21

__________________________________________________



; Let's run a 32-bit program in Ubuntu! 

; Install NASM in Ubuntu: 
; 	sudo apt install nasm

; Create this code file 

; Assemble: 
; 	nasm -f elf32 -l ibrar.lst -o ibrar.o ibrar.asm 
; 
; 	We want to create a format that Linux understand
;	i.e. ELF format in 32-bits 
; 	(we also create a listing file)
;   Read more about ELF here: https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/ 

; Link with shared library that 'understands' the format: ld.so in Linux 
; 	ld -m elf_i386 -o ibrar ibrar.o

; Run it: 
; 	./ibrar 



; Now let's discuss the code! 

; in modern OSs, programs do not start executing 
; "from the first instruction"

; Instead, there is a library (ld.so) that looks for the "start symbol"
; and executes from there. 


; a section "directive" marks the parts of a program 
; for the ELF format  (or whatever binary format you are using)
SECTION .text: 

; We mark the start for this library using the following: 
GLOBAL _start 

_start: 
	; write the string to console 
	mov eax, 0x4 				; write syscall is 0x4 
	mov ebx, 1 					; param - std output should be used 
	mov ecx, message 			; the string to write 
	mov edx, message_length 	; the length of the string 		
	int 0x80 					; invoke the system call 


	; exit the program 
	mov eax, 0x1 				; exit system call is 0x1 
	mov ebx, 0 					; exit code is 0 (return 0) 
	int 0x80 					; Comment out and see!  

	; note that int is NOT the right way to do things!   
	; (more on this later)


; data section here. We can also move it above .code 
SECTION .data: 
	; 0xA is new line, 0x0 is null terminator 
	message: db "Hello!",  0xA,  0x0 
	message_length: equ $-message 

	; message_length: equ 8 
	; .... is exactly the same as 
	; #define message_length 8 
	


; Some useful ELF details 
; readelf -a c05-01.o 		; shows everything 

; readelf -h c05-01.o		; shows headers 
; readelf -S c05-01.o     	; shows sections 

; readelf -x 2 c05-01.o		; shows section number 2 
; readelf -x 2 c05-01  		; see the difference between above and this 





; View program in GDB 

; gdb ./c05-01 
; layout regs       ; shows registers and disassembled code 
; starti 			; start the program interactively 
; si 				; execute one machine instruction 
; quit 				; exit GDB 


======================================================================================================
[org 0x100]             ;Swapping_1

jmp start 

data:   dw  60, 55, 45, 50 
swap:   db  0 

bubblesort: 
    dec  cx
    shl  cx, 1                   ; we will be jumping by 2 every time. So, *2 

    mainloop:  
        mov  si, 0               ; use as array index 
        mov  byte[swap], 0       ; reset swap flag for this iteration 

        innerloop: 
            mov  ax, [bx + si]
            cmp  ax, [bx + si + 2]
            jbe  noswap 

                mov  dx, [bx + si + 2]
                mov  [bx + si], dx 
                mov  [bx + si + 2], ax 
                mov  byte[swap], 1 

            noswap: 
            add  si, 2 
            cmp  si, cx
            jne  innerloop

        cmp  byte[swap], 1 
        je   mainloop 

    ret    ; notice this!! 
start: 
    mov  bx, data 
    mov  cx, 4 

    ; make a function call 
    call bubblesort 

    ; data is now sorted! 

    mov ax, 0x4c00 
    int 0x21 

=====================================================================
[org 0x100]     ;Swapping_2
  
jmp start 

data:   dw  60, 55, 45, 50 
swapflag:   db  0 



swap:
	            mov  ax,[bx+si]
                xchg  ax,[bx + si+2] 
                mov  [bx + si], ax  
				ret

bubblesort: 
    dec  cx
    shl  cx, 1                   ; we will be jumping by 2 every time. So, *2 

    mainloop:  
        mov  si, 0               ; use as array index 
        mov  byte[swapflag], 0       ; reset swap flag for this iteration 

        innerloop: 
            mov  ax, [bx + si]
            cmp  ax, [bx + si + 2]
            jbe  noswap 

               call swap
			   mov  byte[swapflag], 1

            noswap: 
            add  si, 2 
            cmp  si, cx
            jne  innerloop

        cmp  byte[swapflag], 1 
        je   mainloop 

    ret    ; notice this!! 
start: 
    mov  bx, data 
    mov  cx, 4 

    ; make a function call 
    call bubblesort 

    ; data is now sorted! 

    mov ax, 0x4c00 
    int 0x21 


===========================================================

[org 0x0100]                    ;clearScreen

mov  ax, 0xb800         ; video memory base
mov  es, ax             ; cannot move to es through IMM
mov  di, 0              ; top left location 

nextpos: 
    mov  word [es:di], 0x07A6     ; 0x07 -- full white  (try 41) (20 for full clear) (try 23) (A6)
                                    ; 0x20 is the space character
    add  di, 2
    cmp  di, 4000
    jne  nextpos

    mov  ax, 0x4c00
    int  0x21
    
   ;running commands (nasm ibrar.asm -o ibrar.com)  && (ibrar.com)
   
  =============================================================
  [org 0x0100]                    ;Printing helloworld in COAL 
    jmp start
message:     db   'hello world'   
length:      dw   11

clrscr:     
    push es
    push ax
    push di

    mov  ax, 0xb800
    mov  es, ax
    mov  di, 0

    nextloc:
        mov  word [es:di], 0x0720
        add  di, 2
        cmp  di, 4000
        jne  nextloc

    pop  di 
    pop  ax
    pop  es
    ret


printstr:
    push bp
    mov  bp, sp
    push es
    push ax
    push cx 
    push si 
    push di 

    mov ax, 0xb800 
    mov es, ax 
    mov di, 0               


    mov si, [bp + 6]    ;(hello world)
    mov cx, [bp + 4 ]   ;(length)
    mov ah, 0x07 ; only need to do this once 

    nextchar: 
        mov al, [si]
        mov [es:di], ax 
        add di, 2 
        add si, 1 
        
        ; dec cx 
        ; jnz nextchar     

        ; alternatively 
        loop nextchar 


    pop di 
    pop si 
    pop cx 
    pop ax 
    pop es 
    pop bp 
    ret 4 


start: 
    call clrscr 

    mov ax, message 
    push ax 
    push word [length]
    call printstr 



    ; wait for keypress 
    mov ah, 0x1        ; input char is 0x1 in ah 
    int 0x21 

    mov ax, 0x4c00 
    int 0x21 
==========================================================
[org 0x0100]   ;see register for better understanding    ;print Number in COAL
 
    jmp start

clrscr:     
    push es
    push ax
    push di

    mov  ax, 0xb800
    mov  es, ax
    mov  di, 0

    nextloc:
        mov  word [es:di], 0x0720
        add  di, 2
        cmp  di, 4000
        jne  nextloc

    pop  di 
    pop  ax
    pop  es
    ret


printnum: 
    push bp 
    mov  bp, sp
    push es 
    push ax 
    push bx 
    push cx 
    push dx 
    push di 

    ; first, let's split digits and push them onto the stack 

    mov ax, [bp+4]   ; number to print 
    mov bx, 10       ; division base 10 
    mov cx, 0        ; total digit counter 

    nextdigit: 
        mov dx, 0    ; zero out  
        div bx       ; divides ax/bx .. quotient in ax, remainder in dl 
        add dl, 0x30 ; convert to ASCII 
        push dx      ; push to stack for later printing 
        inc cx       ; have another digit 
        cmp ax, 0    ; is there something in quotient? 
        jnz nextdigit 

    ; now let's do the printing 

    mov ax, 0xb800 
    mov es, ax 

    mov di, 0 
    nextpos: 
        pop dx          ; digit to output. Already in ASCII 
        mov dh, 0x04    ; why is this inside the loop here? (0x04 for red) (0x07 for whate forground) (0x01 for blue) (0x87 for blinking)
        mov [es:di], dx 
        add di, 2 
        loop nextpos    ; cx has already been set, use that 

    pop di 
    pop dx 
    pop cx 
    pop bx 
    pop ax 
    pop es
    pop bp 
    ret 2 



start: 
    call clrscr 

    mov ax, 452
    push ax 
    call printnum


    ; wait for keypress 
    mov  ah, 0x1        ; input char is 0x1 in ah 
    int 0x21 

    mov ax, 0x4c00 
    int 0x21 
==========================================================
[org 0x0100]     ;ClearScreen Wait_for_Keypress

jmp  start

clrscr:
    push es
    push ax
    push cx
    push di

    mov  ax, 0xb800
    mov  es, ax
    xor  di, di
    mov  ax, 0x0720
    mov  cx, 2000

    cld                 ; auto-increment mode 
    rep stosw           ; rep cx times, store words 
                        ; source is ax for word, al for bytes 
                        ; destination is es:di 
                        ; inc/dec di as well by 2 bytes 

    pop di
    pop  cx
    pop  ax
    pop  es
    ret

start: 
    call clrscr 

       ; wait for keypress 
    mov  ah, 0x1        ; input char is 0x1 in ah 
    int 0x21 

    mov ax, 0x4c00 
    int 0x21 
=================================================

[org 0x0100]       ;Print msg (clearScreen,string_length,Print)

    jmp start

message: db 'hello world', 0

clrscr:
    push es
    push ax
    push cx
    push di

    mov  ax, 0xb800
    mov  es, ax
    xor  di, di
    mov  ax, 0x0720
    mov  cx, 2000

    cld                 ; auto-increment mode 
    rep stosw           ; rep cx times, store words 
                        ; source is ax for word, al for bytes 
                        ; destination is es:di 
                        ; inc/dec di as well by 2 bytes 

    pop  di
    pop  cx
    pop  ax
    pop  es
    ret

printnum: 
    push bp 
    mov  bp, sp
    push es 
    push ax 
    push bx 
    push cx 
    push dx 
    push di 

    ; first, let's split digits and push them onto the stack 

    mov ax, [bp+4]   ; number to print 
    mov bx, 10       ; division base 10 
    mov cx, 0        ; total digit counter 

    nextdigit: 
        mov dx, 0    ; zero out  
        div bx       ; divides ax/bx .. quotient in ax, remainder in dl 
        add dl, 0x30 ; convert to ASCII 
        push dx      ; push to stack for later printing 
        inc cx       ; have another digit 
        cmp ax, 0    ; is there something in quotient? 
        jnz nextdigit 

    ; now let's do the printing 

    mov ax, 0xb800 
    mov es, ax 

    mov di, 0 
    nextpos: 
        pop dx          ; digit to output. Already in ASCII 
        mov dh, 0x07    ; why is this inside the loop here? 
        mov [es:di], dx 
        add di, 2 
        loop nextpos    ; cx has already been set, use that 

    pop di 
    pop dx 
    pop cx 
    pop bx 
    pop ax 
    pop es
    pop bp 
    ret 2 


strlen:
    push bp
    mov  bp,sp
    push es
    push cx
    push di

    les  di, [bp+4]     ; load DI from BP+4 and ES from BP+6
    mov  cx, 0xffff     ; maximum possible length 
    
    xor  al, al         ; value to find 
    repne scasb         ; repeat until scan does not become NE to AL 
                        ; decrement CX each time 

    mov  ax, 0xffff     
    sub  ax, cx         ; find how many times CX was decremented 

    dec  ax             ; exclude null from the length 

    pop  di
    pop  cx
    pop  es
    pop  bp
    ret  4


start: 
    call clrscr 

    push ds
    mov  ax, message
    push ax
    call strlen          ; return value is in AX 

    push ax             
    call printnum        ; print out the length 


    mov  ah, 0x1
    int 0x21
    mov  ax, 0x4c00
    int 0x21 
=============================================================================
;lecture(19)
;(link assambly & c-code)
SECTION .DATA
	hello:     db 'Hello from ASM!',10
	helloLen:  equ $-hello

SECTION .TEXT
GLOBAL say_hi


say_hi:
    mov rax, rdi          ; first param goes in RDI 
	push rax   			  ; save the value sent to us 

	mov eax, 4            ; write()
	mov ebx, 1            ; STDOUT
	mov ecx, hello
	mov edx, helloLen

	int 80h              ; Interrupt

	pop rax 			 ; get the value sent to us 
	inc rax 			 ; increment it 
	ret                  ; return val is in rax 



# Assemble using: nasm -f elf64 c09-01.asm  -o c09-01-asm.o 

/* example.c */
#include <stdio.h> 
extern int say_hi();


int main(int argc, char *argv[]) {
    int val; 

    printf("Hello from C! \n");
	val = say_hi(5);
    printf("Value returned: %d \n", val);
}



// Compile and link using: gcc -no-pie c09-01.c c09-01-asm.o -o hello
    
   =======================================================
  
  
#  Lecture 23
  
   ----------------------------
#  Cross-Compilation Tutorial 
# ----------------------------


- Write the code 
  cd /tmp 
  mkdir risc 
  cd risc	//goto risc folder/directory

//by runing the below command a file opened you need to write code on it 
//after writing code press ctrl+s in order to save it
gedit (filename).(extension)	//like gedit HelloWorld.s   ||  vi HelloWorld.s 

# --------------- start of program  
# Source: https://smist08.wordpress.com/2019/09/07/risc-v-assembly-language-hello-world/

# Risc-V Assembler program to print "Hello World!"
# to stdout.
#
# a0-a2 - parameters to linux function services
# a7 - linux function number
#

.global _start      # Provide program starting address to linker

# Setup the parameters to print hello world
# and then call Linux to do it.

_start: addi  a0, x0, 1      # 1 = StdOut
        la    a1, helloworld # load address of helloworld
        addi  a2, x0, 13     # length of our string
        addi  a7, x0, 64     # linux write system call
        ecall                # Call linux to output the string

# Setup the parameters to exit the program
# and then call Linux to do it.

        addi    a0, x0, 0   # Use 0 return code
        addi    a7, x0, 93  # Service command code 93 terminates
        ecall               # Call linux to terminate the program

.data
helloworld:      .ascii "Hello World!\n"
# --------------- end of program 



- Cross-Compile for RISCV 
- Download GNU cross-compilation tools (https://wiki.debian.org/RISC-V#Cross_compilation) 
  
  sudo dpkg --add-architecture riscv64 
  sudo apt-get install gcc-riscv64-linux-gnu g++-riscv64-linux-gnu 
  sudo sh -c "cat >/etc/ld.so.conf.d/riscv64-linux-gnu.conf <<EOF
/usr/local/lib/riscv64-linux-gnu
/lib/riscv64-linux-gnu
/usr/lib/riscv64-linux-gnu
/usr/riscv64-linux-gnu/lib/
EOF
"
  
  sudo ln -s /usr/riscv64-linux-gnu/lib/ld-linux-riscv64-lp64d.so.1 /lib

- Cross Compile: 
  riscv64-linux-gnu-as -march=rv64imac -o HelloWorld.o HelloWorld.s
  riscv64-linux-gnu-ld -o HelloWorld HelloWorld.o

- See the assembly: 
  riscv64-linux-gnu-objdump -d HelloWorld


- Download Tiny Emulator source and disk image. (https://bellard.org/tinyemu/) 

- Build and install tiny emulator 

  cd Downloads 
  tar zxvf tinyemu-2019-12-21.tar.gz
  tinyemu-2019-12-21 
  sudo apt install libssl-dev libsdl-dev libcurl4-openssl-dev vim 
  make   # make scripts are important to learn 
  sudo make install 

- cd Downloads/

- tar zxvf diskimage-linux-riscv-2018-09-23.tar.gz 
  cd diskimage-linux-riscv-2018-09-23
  cat root_9p-riscv64.cfg 
  # copy the fs0 line 
  vi root-riscv64.cfg
  # paste the line after drive0 line 

-  
- mount -t 9p /dev/root /mnt 
- cd /mnt 
- cd risc 
- ./HelloWorld 


# More explanation here: https://smist08.wordpress.com/2019/09/07/risc-v-assembly-language-hello-world/

==============================================


================================

